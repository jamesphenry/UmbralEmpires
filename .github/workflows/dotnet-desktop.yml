name: Ctrl+T for Truth

on:
  push:
    branches:
      - main

jobs:
  build-test-readme:
    runs-on: ubuntu-latest

    permissions:
      checks: write
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Run Tests
      id: tests
      run: dotnet test --no-build --configuration Release --verbosity normal --logger "trx;LogFileName=test-results.trx"
      continue-on-error: true

    - name: Generate Test Report Summary (UI)
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: xUnit Tests (UI Report)
        path: '**/test-results.trx'
        reporter: dotnet-trx
        fail-on-error: 'false'

    - name: Parse Test Results and Update README with Detailed Report
      if: steps.tests.outcome == 'success' || steps.tests.outcome == 'failure'
      shell: pwsh
      run: |
        $trxFiles = Get-ChildItem -Path . -Recurse -Filter "test-results.trx" | Select-Object -First 1
        if ($null -eq $trxFiles) {
          Write-Error "Test results file (test-results.trx) not found."
          exit 1
        }

        [xml]$trx = Get-Content $trxFiles.FullName
        $summary = $trx.TestRun.ResultSummary
        $counters = $summary.Counters

        $total = [int]$counters.total
        $passed = [int]$counters.passed
        $failed = [int]$counters.failed
        $skipped = [int]($counters.skipped ?? 0)

        $outcome = if ($failed -gt 0) { "Failed" } elseif ($passed -eq $total) { "Passed" } else { "Mixed" }

        $results = $trx.TestRun.Results.UnitTestResult
        if ($null -ne $results -and $results.GetType().Name -ne 'Object[]') { $results = @($results) }

        $detailedReport += "`n## Details`n"

        if ($null -ne $results) {
          $grouped = $results | Group-Object {
            ($_?.testName -split '\.')[-2..-1] -join '.'
          }

          foreach ($group in $grouped | Sort-Object Name) {
            $groupName = $group.Name
            $nsParts = $groupName -split '\.'
            $className = $nsParts[-1]
            $filename = "$className.cs"

            $githubRepoUrl = "https://github.com/${{ github.repository }}"
            $fileMatch = Get-ChildItem -Recurse -File -Filter $filename | Select-Object -First 1
            $fileUrl = if ($fileMatch) {
              "$githubRepoUrl/blob/main/$($fileMatch.FullName -replace '\\','/' -replace '^.*?/', '')"
            } else {
              "#"
            }

            $testGroup = $group.Group
            $count = $testGroup.Count
            $countPassed = ($testGroup | Where-Object { $_.outcome -eq "Passed" }).Count
            $countFailed = ($testGroup | Where-Object { $_.outcome -eq "Failed" }).Count
            $countSkipped = ($testGroup | Where-Object { $_.outcome -eq "NotExecuted" }).Count

            $detailedReport += "`n### [$groupName]($fileUrl)`n"
            $detailedReport += "**Total: $count | ✅ Passed: $countPassed | ❌ Failed: $countFailed | ⏭ Skipped: $countSkipped**`n"
            $detailedReport += "<details><summary>Click to expand test details</summary>`n`n"

            $detailedReport += "| Test Name | Outcome | Duration (ms) | Error Message |`n"
            $detailedReport += "|-----------|---------|---------------|----------------|`n"

            foreach ($result in $testGroup) {
              $shortName = ($result.testName -split '\.')[-1]
              $testOutcome = $result.outcome
              $durationMs = 0
              try { $durationMs = [math]::Round(($result.duration | ConvertTo-TimeSpan).TotalMilliseconds) } catch {}
              $errorMessage = "-"
              if ($result.Output.ErrorInfo) {
                $errorMessage = ($result.Output.ErrorInfo.Message | Out-String).Trim() `
                  -replace '\|','\|' `
                  -replace "`n","<br>" `
                  -replace "`r",""
              }
              $detailedReport += "| $($shortName -replace '\|','\|') | $testOutcome | $durationMs | $errorMessage |`n"
            }

            $detailedReport += "`n</details>`n"
          }
        } else {
          $detailedReport += "`n(No test results found)`n"
        }

        $readmeFile = "README.md"
        $startMarker = "<!-- TEST-RESULTS-START -->"
        $endMarker = "<!-- TEST-RESULTS-END -->"

        try {
          $readmeContent = Get-Content $readmeFile -Raw
        } catch {
          Write-Error "Error reading README file '$readmeFile': $_"
          exit 1
        }

        $startIndex = $readmeContent.IndexOf($startMarker)
        $endIndex = $readmeContent.IndexOf($endMarker)

        if ($startIndex -eq -1 -or $endIndex -eq -1 -or $startIndex -ge $endIndex) {
          Write-Error "Start ('$startMarker') / End ('$endMarker') markers not found or invalid in $readmeFile."
          exit 1
        }

        $startContent = $readmeContent.Substring(0, $startIndex + $startMarker.Length)
        $endContent = $readmeContent.Substring($endIndex)
        $finalContent = $startContent + "`n" + $detailedReport + "`n" + $endContent

        try {
          Set-Content -Path $readmeFile -Value $finalContent -NoNewline -Encoding UTF8
          Write-Host "$readmeFile updated successfully with detailed report."
        } catch {
          Write-Error "Error writing updated content to '$readmeFile': $_"
          exit 1
        }

    - name: Commit and Push README changes
      if: success() && github.ref == 'refs/heads/main' && github.event_name == 'push'
      shell: bash
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action Bot"
        readme_file="README.md"
        if git diff --quiet HEAD -- "$readme_file"; then
          echo "No changes detected in $readme_file."
          exit 0
        fi
        echo "Changes detected in $readme_file. Committing..."
        git add "$readme_file"
        git commit -m "docs: Update detailed test results report in README [skip ci]"
        git push origin main
