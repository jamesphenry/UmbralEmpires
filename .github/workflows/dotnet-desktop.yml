# .github/workflows/dotnet.yml

name: .NET Build, Test, and Update Detailed README Report

on:
  push:
    branches:
      - main

jobs:
  build-test-readme:
    runs-on: ubuntu-latest

    permissions:
      checks: write
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Run Tests
      id: tests
      run: dotnet test --no-build --configuration Release --verbosity normal --logger "trx;LogFileName=test-results.trx"
      continue-on-error: true

    - name: Generate Test Report Summary (UI)
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: xUnit Tests (UI Report)
        path: '**/test-results.trx'
        reporter: dotnet-trx
        fail-on-error: 'true'

    - name: Parse Test Results and Update README with Detailed Report
      if: steps.tests.outcome == 'success' || steps.tests.outcome == 'failure'
      shell: pwsh
      run: |
        $trxFiles = Get-ChildItem -Path . -Recurse -Filter "test-results.trx" | Select-Object -First 1
        if ($null -eq $trxFiles) {
          Write-Error "Test results file (test-results.trx) not found."
          exit 1
        }
        $trxFile = $trxFiles.FullName
        Write-Host "Found test results file at: $trxFile"

        $readmeFile = "README.md"
        $startMarker = "<!-- TEST-RESULTS-START -->"
        $endMarker = "<!-- TEST-RESULTS-END -->"

        try {
          [xml]$trx = Get-Content $trxFile
        } catch {
          Write-Error "Error parsing TRX file '$trxFile': $_"
          exit 1
        }

        $summary = $trx.TestRun.ResultSummary
        if ($null -eq $summary) {
          Write-Error "Could not find ResultSummary node in TRX file."
          exit 1
        }
        $counters = $summary.Counters
        $outcome = $summary.outcome

        $detailedReport = "# Test Run Report (`$((Get-Date).ToString('yyyy-MM-dd HH:mm:ss')) UTC`)"
        $detailedReport += "`n`n## Summary`n"
        $detailedReport += "* **Overall Outcome:** $outcome`n"
        $detailedReport += "* Total Tests: $($counters.total)`n"
        $detailedReport += "* Passed: $($counters.passed)`n"
        $detailedReport += "* Failed: $($counters.failed)`n"

        $results = $trx.TestRun.Results.UnitTestResult
        if ($null -ne $results -and $results.GetType().Name -ne 'Object[]') { $results = @($results) }

        $detailedReport += "`n## Details`n"

        if ($null -ne $results) {
            $grouped = $results | Group-Object {
              ($_?.testName -split '\.')[-2..-1] -join '.'
            }

            foreach ($group in $grouped | Sort-Object Name) {
              $groupName = $group.Name
              $nsParts = $groupName -split '\.'
              $className = $nsParts[-1]
              $namespace = ($nsParts[0..($nsParts.Length - 2)] -join '.')
              $filename = "$className.cs"

              $githubRepoUrl = "https://github.com/${{ github.repository }}"
              $linkPath = "blob/main"
              $searchPattern = "*/$filename"
              $fileMatch = Get-ChildItem -Recurse -File -Filter $filename | Select-Object -First 1
              $fileUrl = if ($fileMatch) { "$githubRepoUrl/$linkPath/$($fileMatch.FullName -replace '\\','/' -replace '^.*?/', '')" } else { "#" }

              $detailedReport += "`n### [$groupName]($fileUrl)`n"
              $detailedReport += "| Test Name | Outcome | Duration (ms) | Error Message |`n"
              $detailedReport += "|-----------|---------|---------------|---------------|`n"

              foreach ($result in $group.Group) {
                $shortName = ($result.testName -split '\.')[-1]
                $testOutcome = $result.outcome
                $durationMs = 0
                try { $durationMs = [math]::Round(($result.duration | ConvertTo-TimeSpan).TotalMilliseconds) } catch {}
                $errorMessage = "-"
                if ($result.Output.ErrorInfo) {
                  $errorMessage = ($result.Output.ErrorInfo.Message | Out-String).Trim() `
                      -replace '\|','\|' `
                      -replace "`n","<br>" `
                      -replace "`r",""
                }

                $detailedReport += "| $($shortName -replace '\|','\|') | $testOutcome | $durationMs | $errorMessage |`n"
              }
            }
        } else {
            $detailedReport += "`n(No test results found)`n"
        }

        try {
          $readmeContent = Get-Content $readmeFile -Raw
        } catch {
          Write-Error "Error reading README file '$readmeFile': $_"
          exit 1
        }

        $startIndex = $readmeContent.IndexOf($startMarker)
        $endIndex = $readmeContent.IndexOf($endMarker)

        if ($startIndex -eq -1 -or $endIndex -eq -1 -or $startIndex -ge $endIndex) {
          Write-Error "Start ('$startMarker') / End ('$endMarker') markers not found or invalid in $readmeFile."
          exit 1
        }

        $startContent = $readmeContent.Substring(0, $startIndex + $startMarker.Length)
        $endContent = $readmeContent.Substring($endIndex)
        $finalContent = $startContent + "`n" + $detailedReport + "`n" + $endContent

        try {
          Set-Content -Path $readmeFile -Value $finalContent -NoNewline -Encoding UTF8
          Write-Host "$readmeFile updated successfully with detailed report."
        } catch {
          Write-Error "Error writing updated content to '$readmeFile': $_"
          exit 1
        }

    - name: Commit and Push README changes
      if: success() && github.ref == 'refs/heads/main' && github.event_name == 'push'
      shell: bash
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action Bot"
        readme_file="README.md"
        if git diff --quiet HEAD -- "$readme_file"; then
          echo "No changes detected in $readme_file."
          exit 0
        fi
        echo "Changes detected in $readme_file. Committing..."
        git add "$readme_file"
        git commit -m "docs: Update detailed test results report in README [skip ci]"
        git push origin main
